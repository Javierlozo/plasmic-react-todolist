// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p9CtFVE2uTezdY5ZU4rdWN
// Component: xkCNtN30hE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 3FMFwI6YOIw/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_to_do_list.module.css"; // plasmic-import: p9CtFVE2uTezdY5ZU4rdWN/projectcss
import sty from "./PlasmicToday.module.css"; // plasmic-import: xkCNtN30hE/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 3vJlxsXU7fu/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: iR05GEIiE1J/icon

createPlasmicElementProxy;

export type PlasmicToday__VariantMembers = {};
export type PlasmicToday__VariantsArgs = {};
type VariantPropType = keyof PlasmicToday__VariantsArgs;
export const PlasmicToday__VariantProps = new Array<VariantPropType>();

export type PlasmicToday__ArgsType = {};
type ArgPropType = keyof PlasmicToday__ArgsType;
export const PlasmicToday__ArgProps = new Array<ArgPropType>();

export type PlasmicToday__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  text?: p.Flex<"div">;
  ol?: p.Flex<"ol">;
};

export interface DefaultTodayProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicToday__RenderFunc(props: {
  variants: PlasmicToday__VariantsArgs;
  args: PlasmicToday__ArgsType;
  overrides: PlasmicToday__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"To do List:"}
            </h1>
            <Button
              className={classNames("__wab_instance", sty.button__nSuLt)}
              onClick={async event => {
                const $steps = {};
                $steps["goToTomorrow"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "navigation",
                            interactionUuid: "57pzV-Oh4",
                            componentUuid: "xkCNtN30hE",
                            argName: "destination"
                          },
                          () => `/tomorrow`
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "57pzV-Oh4",
                          componentUuid: "xkCNtN30hE"
                        },
                        () =>
                          (({ destination }) => {
                            __nextRouter?.push(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToTomorrow"] === "object" &&
                  typeof $steps["goToTomorrow"].then === "function"
                ) {
                  $steps["goToTomorrow"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "57pzV-Oh4",
                      componentUuid: "xkCNtN30hE"
                    },
                    $steps["goToTomorrow"]
                  );
                }
              }}
            >
              {"Tomorrow"}
            </Button>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <ol
                    data-plasmic-name={"ol"}
                    data-plasmic-override={overrides.ol}
                    className={classNames(
                      projectcss.all,
                      projectcss.ol,
                      sty.ol
                    )}
                  >
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        projectcss.__wab_text,
                        sty.li___8Llbl
                      )}
                    >
                      {"Grocery store list"}
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        projectcss.__wab_text,
                        sty.li___82Eh4
                      )}
                    >
                      {"Grocery trip"}
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        projectcss.__wab_text,
                        sty.li__uKxbO
                      )}
                    >
                      {"Mow the lawn"}
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        projectcss.__wab_text,
                        sty.li__j70Vt
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "line-through" }}
                        >
                          {"Buy smoke detectors (5)"}
                        </span>
                      </React.Fragment>
                    </li>
                  </ol>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </section>
          <Button className={classNames("__wab_instance", sty.button__tfaz8)} />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section", "h1", "text", "ol"],
  section: ["section", "h1", "text", "ol"],
  h1: ["h1"],
  text: ["text", "ol"],
  ol: ["ol"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  h1: "h1";
  text: "div";
  ol: "ol";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicToday__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicToday__VariantsArgs;
    args?: PlasmicToday__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicToday__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicToday__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicToday__ArgProps,
          internalVariantPropNames: PlasmicToday__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicToday__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToday";
  } else {
    func.displayName = `PlasmicToday.${nodeName}`;
  }
  return func;
}

export const PlasmicToday = Object.assign(
  // Top-level PlasmicToday renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    ol: makeNodeComponent("ol"),

    // Metadata about props expected for PlasmicToday
    internalVariantProps: PlasmicToday__VariantProps,
    internalArgProps: PlasmicToday__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicToday;
/* prettier-ignore-end */
